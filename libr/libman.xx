.w77 	; 78桁の箱形
.a	; 両端をそろえる
.ai	; オートインデント
.t	; タブ展開指定
.f	; 行連結


★ ビデオ共通ライブラリ -~> #include "video.h"

~{
void set_video_mode(int x);
int  get_video_mode(void);
~}	画面モードを設定/取得するマクロ。
	320×200×256色は「0x13(13h)」とすればよい。
	DOSに戻る前に、元のモードに戻して置くことを忘れないように

int vsync(void);
	垂直帰線期間中ならば 0 以外の値をとる。



★ 画面モード13h(320×200×256色)用ライブラリ -~> #include "sprite.h"

void add_vram_offset_13h( signed int delta );
	ハードウェアスクロールさせる。
	なお、~{delta=Δx+320×Δy~}。

~{
unsigned char GRAM[200][320];
unsigned char VRAM[200][320];	
~}	13hモード時のVRAMを二次元配列風にアクセスできるようにしたマクロ。
	「VRAM」の方はハードウエアスクロールに対応しているが、その分遅い。


★ 擬似スプライトシステムライブラリ -~> #include "sprite.h"


　画面モード13hにおいて、重ね合せ等をサポートしたグラフィックパターン表示の
ためのライブラリである。以下では「スプライト」という単語を頻繁に使用しているが、
もちろん、IBM-PCのハードウェアでスプライトを実現しているわけではなく、単なる
パターンの重ね合せ表示のライブラリにすぎないことをことわっておく。
スプライトと呼んでいるのはゴロがよくて呼びやすいからであって、
そんな大層なものではない。

　スクロールゲームも可能だが、ハードウェアスクロールをさせるとスプライトも
いっしょに流れていってしまう欠点がある。
対策としては、走査線の垂直帰線期間中に表示していただく(消去&表示)。
そのため、スクロールゲームに限っては、巨大なパターンをワンサカ使うのは難しい。
しかし、速いCPUならば問題あるまい(ああ、まるで ?UST-SYSTEM)。

　本ライブラリでは、スプライトパターン(pattern_t)と背景セル(beta_t)という
二種類のデータ構造を用意している。
前者は単独で扱い、サイズは任意で、文字通りスプライトのように使う。
後者は128×128ドットの固定サイズで、これを切り貼りして背景を構成するのに使う。
まぁ、PCGみたいなもんだ。


~{
	─ SKIPDOT形式(pattern_t) ─~>
	2 bytes	VRAMスキップbyte数=Δx+320*Δy
	2 bytes	VRAM描画byte数(=:n)
	n bytes	カラーパターン(1byte=1dot)
	2 bytes	VRAMスキップbyte数=Δx+320*Δy
	 :	 :
	n'bytes	カラーパターン
	2 bytes	=0
	2 bytes	=0
	─~>
	
	─ BETA形式(beta_tの場合:w=h=128固定) ─~>
	w×h bytes カラーパターン
	w×h bits  マスクパターン(MSBが左側のドットをしめす)
	─~>
~}

int sprite_init( void );
	背景バッファの確保など、擬似スプライトシステム周りを初期化する。

unsigned char BGRAM[200][320];
	背景バッファ。
	背景を描く時に「BGRAM[y][x] = VRAM[y][x] = c;」等と書いておけば、
	上をスプライトパターンを重ねても、パターンの消去時に自動的に
	回復される。
	二次元配列風に扱えるが、実はマクロであり、sprite_initを実行するまで
	存在しないので注意!

pattern_t sprite_load( const char *fname );
	SKIPDOT形式でセーブされた単一のスプライトをロードする。
	1ファイルを1パターンとしてしかロードできない。
	複数のパターンを1ファイルとしてロードしたいときは、
	beta_openとbeta_to_spriteを使う。

short sprite_putat( int x , int y , pattern_t pattern );
	(x,y)を基準にパターンを表示する。
	帰り値は表示したパターンのVRAM上のアドレスであり、
	sprite_putoffに渡すべき値である。
	なお、パターンにはIDがあるわけではないので、
	別の位置に表示しなおしても、前の位置の
	パターンが自動的に消えるわけではない。

void sprite_putoff( short address , pattern_t pattern );
	表示したパターンを消去し、パターンの位置にあった背景を回復する。

void bgcls( void );
	背景バッファを 黒一色とする。

void bgsync( void );
	現在、画面に表示されている全内容をそのまま背景バッファに
	貼りつけてしまう。
	その時点で表示されているスプライトがsprite_putoffで
	消えなくなってしまうので、注意。

int bmp_bgload( const char *fname , int palette_load_flag );
	*.BMPファイルを画面&背景バッファにロードする。
	palette_load_flagが 0でない時は、パレットもロードする。
	なお、320×200に収まらない部分については表示しない。

beta_t beta_open( const char *fname );
	背景セルをファイルからロードする。
	背景セルは128×128ドットのBETA形式でセーブされている必要があるが、
	SKIPDOT形式でもよい(内部でconvertする)。
	使用には、far領域約18キロバイトが必要である。

void beta_close( beta_t );
	背景セルの使用を終了し、使用した領域を開放する。

void beta_putat(beta_t beta,int x,int y,int width,int height,int X,int Y);
void beta_bgputat(beta_t beta,int x,int y,int width,int height,int X,int Y);
	背景セルの左上(x,y)から大きさ(width,height)の範囲を画面(X,Y)に直接描画
	する。
	beta_bgputatは、背景バッファにも同時に書きこむ。
	なお、重ね合せは考慮されないので注意。

pattern_t beta_to_sprite(beta_t beta,int x,int y,int width,int height);
	背景セルの`一部'をスプライトパターンに変換し、sprite_putat,
	sprite_putoffで	使えるようにする。
	得られたパターンは、beta_close後でも使用可能である。

void boxdraw ( int x , int y , unsigned width , unsigned height , int color );
void boxdrawx( int x , int y , unsigned width , unsigned height , int color );
void boxfill ( int x , int y , unsigned width , unsigned height , int color );
void boxfillx( int x , int y , unsigned width , unsigned height , int color );
	箱を描く。〜draw は枠のみ、〜fill は中も塗り潰す。
	〜xがついているときは、カラーコードとGRAMの内容との間でXOR演算を行う。
	(x,y)は箱の左上の座標、(width,height)は大きさを表す。
